plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'checkstyle'
//    id "org.openapi.generator" version "5.3.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

//configurations.all {
//    exclude group: 'org.springdoc', module: 'springdoc-openapi-ui'
//}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.4.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor "org.mapstruct:mapstruct-processor:1.3.1.Final"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.5'
    implementation 'org.postgresql:postgresql:42.3.0'
//    implementation 'io.swagger.core.v3:swagger-core:2.1.12'
//    implementation 'org.springdoc:springdoc-openapi-ui:1.6.5'
//    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
//    implementation "io.swagger.core.v3:swagger-annotations:2.1.10"
//    implementation "org.openapitools:jackson-databind-nullable:0.2.1"
//    implementation "io.springfox:springfox-boot-starter:3.0.0"
//    implementation "io.springfox:springfox-schema:3.0.0"
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks {
    test{
        dependsOn checkstyleMain
        dependsOn checkstyleTest
    }
}

checkstyle {
    toolVersion '7.8.1'
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}

task stage(dependsOn: ['bootJar'])

tasks.stage.doLast() {
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/assetCompile")
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/libs", exclude: "*.jar") //delete everything except jar file inside build folder
}

jar { //Don't package test folders and files
    exclude "test/**"
    exclude "test/**/**"
}

build.mustRunAfter clean //First clean then build to avoid cache issues etc

gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(stage)) { //Don't run test on heroku
            test.enabled = false
        }
}

bootJar { //Exclude test files when pack boot jar file
    enabled = true
    classifier = 'boot'
    exclude "test/**"
    exclude "test/**/**"
}

//apply plugin: 'org.openapi.generator'
//openApiGenerate {
//    generatorName = "spring"
//    library = "spring-boot"
//
//    inputSpec = "$projectDir/src/main/resources/openapi/resolver.json".toString()
//    outputDir = "$buildDir/generated".toString()
//
//    apiPackage = "com.example.cameraresolver.api"
//    invokerPackage = "com.example.cameraresolver.invoker"
//    modelPackage = "com.example.cameraresolver.model"
//    templateDir = "$projectDir/src/main/resources/openapi/templates"
//    validateSpec = true
//
//    configOptions = [
//            "dateLibrary"         : "java8",
//            "interfaceOnly"       : "true",
//            "useBeanValidation"   : "true",
//            "skipDefaultInterface": "true",
//            "useTags"             : "true",
//            "java8"               : 'true',
//            "openApiNullable"     : 'false',
//    ]
//}
//
//tasks {
//    compileJava {
//        dependsOn "openApiGenerate"
//    }
//}
//
//sourceSets.main.java.srcDir "${buildDir}/generated/src/main/java"
